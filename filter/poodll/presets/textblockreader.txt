{"name":"Passage reader","key":"textblockreader","version":"1.0.7","instructions":"This is a small html5 audio player that will read aloud the enclosed text block. There are text to speech options as well as the option to highlight words or sentences. Sentences works better","showatto":"1","showplayers":"0","requirecss":"//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css","requirejs":"","shim":"","defaults":"highlightmode=\"sentence|word|none\",pause=\"fa-stop\",play=\"fa-volume-up\",stoporpause=\"stop|pause\", background=\"red\",color=\"#fff\",width=\"40\",height=\"40\",speaker=\"Male|Female\",language=\"English(US)|English(GB)|English(AU)|English(In)|English(Welsh)|Danish|Dutch|French(FR)|French(CA)|German|Icelandic|Italian|Japanese|Korean|Norwegian|Polish|Portugese(BR)|Portugese(PT)|Romanian|Russian|Spanish(ES)|Spanish(US)|Swedish|Turkish|Welsh\"","amd":"1","body":"<button type='button' id='@@AUTOID@@' class=\"roundmini-audio-player\" style=\"width: @@width@@px; height: @@height@@px; background-color: @@background@@; \tborder-radius: 50%;\">\n\t<audio class=\"roundminiaudio nomediaplugin\">\n\t</audio>\n\t<i class=\"fa fa-volume-up\" aria-hidden=\"true\" style=\"color:@@color@@\"></i>\n</button>\n<div id='@@AUTOID@@_textblock' >\n<div class='tbr_innerdiv'>","bodyend":"</div>\n</div>","script":"//DECLARATIONS and INITs ...........................\nvar thesentence_number =0;\nvar lettered= false;\n\n//audio player declarations\nvar aplayer = $('#' + @@AUTOID@@).children().first();\nvar fa = $('#' + @@AUTOID@@ + ' .fa');\n\n//text to audio preparation\nvar poodllfilelib = M.cfg.wwwroot + '/filter/poodll/poodllfilelib.php?datatype=speaktext&paramone=';\nvar format = \"text\";\n\n//determine the voice\nvar mf=@@speaker@@\nswitch(@@language@@){\ncase \"English(US)\": voice = mf=='Male'?'Joey':'Kendra';break;\ncase \"English(GB)\": voice = mf=='Male'?'Brian':'Amy';break;\ncase \"English(AU)\": voice = mf=='Male'?'Russell':'Nicole';break;\ncase \"English(IN)\": voice = mf=='Male'?'Aditi':'Raveena';break;\ncase \"English(WELSH)\": voice = mf=='Male'? 'Geraint':'Geraint';break;\ncase \"Danish\": voice = mf=='Male'?'Mads':'Naja';break;\ncase \"Dutch\": voice = mf=='Male'?'Ruben':'Lotte';break;\ncase \"French(FR)\": voice = mf=='Male'?'Mathieu':'Celine';break;\ncase \"French(CA)\": voice = mf=='Male'?'Chantal':'Chantal';break;\ncase \"German\": voice = mf=='Male'?'Hans':'Marlene';break;\ncase \"Icelandic\": voice = mf=='Male'?'Karl':'Dora';break;\ncase \"Italian\": voice = mf=='Male'?'Carla':'Giorgio';break;\ncase \"Japanese\": voice = mf=='Male'?'Takumi':'Mizuki';break;\ncase \"Korean\": voice = mf=='Male'?'Seoyan':'Seoyan';break;\ncase \"Norwegian\": voice = mf=='Male'?'Liv':'Liv';break;\ncase \"Polish\": voice = mf=='Male'?'Jacek':'Ewa';break;\ncase \"Portugese(BR)\": voice = mf=='Male'?'Ricardo':'Vitoria';break;\ncase \"Portugese(PT)\": voice = mf=='Male'?'Cristiano':'Ines';break;\ncase \"Romanian\": voice = mf=='Male'?'Carmen':'Carmen';break;\ncase \"Russian\": voice = mf=='Male'?'Maxim':'Tatyana';break;\ncase \"Spanish(ES)\": voice = mf=='Male'?'Enrique':'Conchita';break;\ncase \"Spanish(US)\": voice = mf=='Male'?'Miguel':'Penelope';break;\ncase \"Swedish\": voice = mf=='Male'?'Astrid':'Astrid';break;\ncase \"Turkish\": voice = mf=='Male'?'Filiz':'Filiz';break;\ncase \"Welsh\": voice = mf=='Male'?'Gwyneth':'Gwyneth';break;\ndefault: voice = mf=='Male'?'Brian':'Amy';\n}\n\n\n//fetch the text to read\nvar useblock = $('#' + @@AUTOID@@ + '_textblock');\nvar usetext = useblock.text();\n//we replace tags with markers to survive going into a URL and out again\nusetext = usetext.replace(/</gi, \"PPPP\");\nusetext = usetext.replace(/>/gi, \"dddd\");\n\n//some common selectors\nvar wordselector = 'span.tbr_word';\nvar sentenceselector = 'span.tbr_sentence';\n\n//FUNCTIONS ...........................\n\n//FUNCTION: determine if the string is text or HTML\nvar isHTML = function (testString) {\n    var htmlRegex = new RegExp(\"<([A-Za-z][A-Za-z0-9]*)\\\\b[^>]*>(.*?)</\\\\1>\");\n    return htmlRegex.test(testString);\n};\n\n//FUNCTION: split a text passage into words\nvar split_into_words= function(thetext){\n   thetext = thetext.replace(/\\s+/g,' ').trim();\n   if(thetext==''){return[]};\n   return thetext.split(' ');  \n};\n\n//FUNCTION: split a text passage into sentences\nvar split_into_sentences = function(thetext){\n     thetext = thetext.replace(/\\s+/g,' ').trim();\n   if(thetext ==''){return[]};\n   return thetext.match(/([^\\.!\\?]+[\\.!\\?\"']+)|([^\\.!\\?\"']+$)/g);  \n};\n\n//FUNCTION: break a text passage into words/sentences, and surround the words with marker tags\nvar spanify_text_passage = function(){\n\n         //get all the text nodes in the useblock\n         var textnodes = useblock.find('*').contents().filter(function(){ return this.nodeType == 3; });\n          //wrap sentence or words in text block with spans\n          textnodes.each(function(){\n             var retpieces = ''; \n             if(@@highlightmode@@=='word'){\n                //for words\n                 var thewords = split_into_words($(this).text());\n                 for (var theword=0; theword < thewords.length; theword++){\n                    retpieces =  retpieces + '<span class=\"tbr_word\">' + thewords[theword] + '</span> ';\n                 }//end of for loop\n             }else{\n                //for sentences\n                var thesentences = split_into_sentences($(this).text());\n                for (var thesentence=0; thesentence < thesentences.length; thesentence++){\n                     retpieces =  retpieces + '<span class=\"tbr_sentence\">' + thesentences[thesentence] + '</span>&nbsp;';\n                 }//end of for loop\n             }\n             $(this).replaceWith(retpieces);\n          });//end of textnodes each\n};\n\n//FUNCTION:  highlight a sentence as active\nvar dehighlight_all = function(){\n  switch(@@highlightmode@@){\n      case 'word':\n          $(wordselector,useblock).removeClass('activesentence');\n          break;\n      case 'sentence':\n         $(sentenceselector,useblock).removeClass('activesentence');\n         break;\n      case 'none':\n      default:\n         //do nothing\n  }\n}\n\n//FUNCTION:  highlight a sentence as active\nvar highlight_sentence = function(thesentence){\n  switch(@@highlightmode@@){\n      case 'word':\n          $(wordselector,useblock).removeClass('activesentence');\n          $(wordselector,useblock).slice(wordstarts[thesentence],wordstarts[thesentence] + wordcounts[thesentence]).addClass('activesentence');\n          break;\n      case 'sentence':\n         $(sentenceselector,useblock).removeClass('activesentence');\n         $(sentenceselector,useblock).slice(thesentence,thesentence+1).addClass('activesentence');\n         break;\n      case 'none':\n      default:\n         //do nothing\n  }\n}\n\n//FUNCTION: play a single sentence and mark it active for display purposes\nvar doplayaudio = function(thesentence){\n     highlight_sentence(thesentence);\n     aplayer.attr('src',sentenceURLs[thesentence]);\n     aplayer[0].play();\n};\n\n//AUDIO PLAYER events\naplayer[0].addEventListener('ended', function(){\n     if(thesentence_number< sentences.length -1){\n         thesentence_number++;\n         doplayaudio(thesentence_number);\n    }else{\n      dehighlight_all();\n      $(fa).removeClass(@@pause@@);\n      $(fa).addClass(@@play@@);\n      aplayer[0].pause();\n    }\n});\n\n$('#' + @@AUTOID@@).click(function(){\n  if(!aplayer[0].paused && !aplayer[0].ended){\n     aplayer[0].pause();\n     if(@@stoporpause@@=='stop'){aplayer[0].load();}\n     $(fa).removeClass(@@pause@@);\n     $(fa).addClass(@@play@@);\n   }else{\n       if(!lettered){\n          spanify_text_passage();\n          lettered=true;\n       };//end of if lettered\n    thesentence_number=0; \n    doplayaudio(thesentence_number);\n    $(fa).removeClass(@@play@@);\n    $(fa).addClass(@@pause@@);\n  }//end of if paused ended\n});\n\n//PROCEDURAL stuff ...........................\n//break it into sentences, and fetch data + TTS URL for each sentence\nvar sentences = split_into_sentences(usetext);\nwordstarts=[];\nwordcounts=[];\nsentenceURLs=[];\nvar previousend=0;\nfor (var currentsentence=0;currentsentence<sentences.length;currentsentence++){\n  wordstarts[currentsentence]= previousend;\n  wordcounts[currentsentence]= split_into_words(sentences[currentsentence]).length;\n  previousend = previousend + wordcounts[currentsentence];\n\n  var datastring= format + '|' + voice + '|' + sentences[currentsentence];\n  var src = poodllfilelib+encodeURIComponent(datastring);\n  sentenceURLs[currentsentence]= src;\n}","style":"button.roundmini-audio-player{\n\tborder: none;\n\tcolor: #fff;\n}\nbutton.roundmini-audio-player .fa{\n     font-size: 28px;\n}\n.activesentence {\n    background: #c5efcf;\n   /* font-weight: bold; */\n}","dataset":"","datasetvars":"","alternate":"","alternateend":""}